name: Unit Tests

run-name: "${{ github.event.inputs.title }}"

defaults:
  run:
    shell: bash -le {0}

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      title:
        description: 'set a title for this run'
        required: false
        default: ''
      repo:
        description: 'GitHub repo {owner}/{repo}'
        required: false
        default: ''
      ref:
        description: 'GitHub ref: Branch, Tag or Commit SHA'
        required: false
        default: ''
      pr_number:
        description: 'PR Number'
        required: false
        type: number
      test_names:
        description: 'Input Test(s) to Run (default all)'
        required: false
        default: ''
      test_regex:
        description: 'Regex to filter test files'
        required: false
        default: ''
      artifact_id:
        description: 'Run id for artifact to be downloaded'
        required: false
        default: ''
      max-parallel:
        description: 'Parallel jobs'
        required: false
        default: '20'
      exclusive-gpu:
        description: 'One Test Per GPU'
        type: boolean
        required: false
        default: true
      server:
        description: 'Wheel Build Server'
        type: choice
        options:
          - '["self-hosted", "xeon5"]'
          - '["self-hosted", "zen4"]'

env:
  CUDA_DEVICE_ORDER: PCI_BUS_ID
  CUDA_VISIBLE_DEVICES: 0
  TORCH_CUDA_ARCH_LIST: '8.6 8.9 9.0 12.0'
  PYTORCH_ALLOC_CONF: 'expandable_segments:True'
  MAX_JOBS: 4
  RUNNER: 10.0.13.31
  XEON5: 10.0.14.249
  UV_INDEX_URL: http://10.0.14.249/simple
  CUDA_VERSION: 128
  TORCH_VERSION: 2.8.0
  PYTHON_VERSION: 312 # use 312, no need to recompile libs like flash_attn...
  # PYTHON_GIL: 0 // test libs don't support yet
  BUILD_QQQ: 1
  BUILD_EORA: 1
  GPTQMODEL_BUILD_EXLLAMA_V1: 1
  LEGACY_TESTS: "models/test_internlm.py,models/test_internlm2_5.py,models/test_xverse.py"
  IGNORED_TEST_FILES: "test_tgi.py,test_gptneox.py,models/test_mixtral.py,models/test_phi_3_moe.py,test_bits_new.py"
  GPTQMODEL_FORCE_BUILD: 1
  repo: ${{ github.event.inputs.repo || github.repository }}
  ref: ${{ github.event.inputs.ref || github.ref }}

concurrency:
  group: ${{ github.event.inputs.ref || github.ref }}-workflow-unit-tests-${{ github.event.inputs.test_names }}
  cancel-in-progress: true

jobs:
  check-vm:
    runs-on: ubuntu-24.04
    outputs:
      ip: ${{ steps.get_ip.outputs.ip }}
      run_id: ${{ steps.get_ip.outputs.run_id }}
      max-parallel: ${{ steps.get_ip.outputs.max-parallel }}
      cuda_version: ${{ env.CUDA_VERSION }}
    steps:
      - name: Print env
        run: |
          echo "repo: ${{ env.repo }}"
          echo "ref: ${{ env.ref }}"
          echo "artifact_id: ${{ github.event.inputs.artifact_id }}"
          echo "test_names: ${{ github.event.inputs.test_names }}"
          echo "exclusive-gpu: ${{ github.event.inputs.exclusive-gpu }}"
          echo "selected server: ${{ github.event.inputs.server }}"

      - name: Select server
        id: get_ip
        run: |
          echo "ip=$RUNNER" >> "$GITHUB_OUTPUT"

          echo "ip: $ip"

          if [ -n "${{ github.event.inputs.artifact_id }}" ]; then
            run_id="${{ github.event.inputs.artifact_id }}"
          else
            run_id="${{ github.run_id }}"
          fi
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"
          echo "artifact_id=$run_id"

          max_p=${{ github.event.inputs.max-parallel }}
          max_p="{\"size\": ${max_p:-20}}"
          echo "max-parallel=$max_p" >> "$GITHUB_OUTPUT"
          echo "max-parallel=$max_p"

  list-test-files:
    runs-on: ubuntu-24.04
    outputs:
      torch-files: ${{ steps.files.outputs.torch-files }}
      transformers-files: ${{ steps.files.outputs.transformers-files }}
      m4-files: ${{ steps.files.outputs.m4-files }}

    steps:
      - name: Checkout Codes
        uses: actions/checkout@v5
        with:
          repository: ${{ env.repo }}
          ref: ${{ env.ref }}

      - name: Fetch PR by number
        if: ${{ github.event.inputs.pr_number != 0 }}
        run: |
          PR_NUMBER=${{ github.event.inputs.pr_number }}
          echo "pr number $PR_NUMBER"
          git config --global --add safe.directory $(pwd)
          git fetch origin pull/${PR_NUMBER}/head:pr-${PR_NUMBER}
          git checkout pr-${PR_NUMBER}

      - name: List files
        id: files
        run: |
          script="
          import json
          import os
          import re

          LEGACY_TESTS = '${LEGACY_TESTS}'
          IGNORED_TEST_FILES = '${IGNORED_TEST_FILES}'

          TEST_NAMES='${{ github.event.inputs.test_names }}'
          TEST_REGEX='${{ github.event.inputs.test_regex }}'

          input_test_files_list = [f.strip().removesuffix('.py') for f in TEST_NAMES.split(',') if f.strip()]

          transformers_test_files = [f.strip().removesuffix('.py') for f in f'{LEGACY_TESTS}'.split(',') if f.strip()]
          transformers_test_files = [f for f in transformers_test_files if not input_test_files_list or f in input_test_files_list]

          all_tests = [f.removesuffix('.py') for f in os.listdir('tests/') if f.startswith('test_') and f.endswith('.py') and f.strip().removesuffix('py') not in f'{IGNORED_TEST_FILES}']
          all_tests_models = ['models/'+f.removesuffix('.py') for f in os.listdir('tests/models') if f.startswith('test_') and f.endswith('.py') and f.strip().removesuffix('py') not in f'{IGNORED_TEST_FILES}']

          torch_test_files = [f for f in all_tests+all_tests_models if (not input_test_files_list or f in input_test_files_list) and f not in transformers_test_files and 'mlx' not in f]

          torch_test_files = [test for test in torch_test_files if re.match(f'{TEST_REGEX}', test) and 'ipex' not in test and 'xpu' not in test]
          transformers_test_files = [test for test in transformers_test_files if re.match(f'{TEST_REGEX}', test)]

          m4_test_files = [f for f in all_tests if ('mlx' in f or 'apple' in f) and (f.strip().removesuffix('.py') in input_test_files_list if input_test_files_list else True)]

          print(f'{json.dumps(torch_test_files)}|{json.dumps(transformers_test_files)}|{json.dumps(m4_test_files)}')
          "

          test_files=$(python3 -c "$script")
          IFS='|' read -r torch_test_files transformers_test_files mlx_files <<< "$test_files"

          echo "torch-files=$torch_test_files" >> "$GITHUB_OUTPUT"
          echo "transformers-files=$transformers_test_files" >> "$GITHUB_OUTPUT"
          echo "m4-files=$mlx_files" >> "$GITHUB_OUTPUT"

          echo "Test files: $test_files"
          echo "Torch Test files: $torch_test_files"
          echo "Transformers Test files: $transformers_test_files"
          echo "MLX Test files: $mlx_files"
          echo "Ignored Test files: $IGNORED_TEST_FILES"

      - name: Print conditions and parameters
        run: |
          echo "Parameters:"
          echo "needs.list-test-files.outputs.torch-files: ${{ needs.list-test-files.outputs.torch-files }}"
          echo "needs.list-test-files.outputs.transformers-files: ${{ needs.list-test-files.outputs.transformers-files }}"
          echo "needs.list-test-files.outputs.m4-files: ${{ needs.list-test-files.outputs.m4-files }}"
          echo "github.event.inputs.artifact_id: ${{ github.event.inputs.artifact_id }}"
          echo "needs.build.result: ${{ needs.build.result }}"
          echo "github.event.inputs.test_names: ${{ github.event.inputs.test_names }}"
          echo ""

          echo "Conditions:"
          echo "will build run: ${{ needs.list-test-files.outputs.torch-files != '[]' && needs.list-test-files.outputs.transformers-files != '[]' && !(needs.list-test-files.outputs.m4-files == '[]' && needs.list-test-files.outputs.m4-files == '[]') }}"
          echo "will legacy run: ${{ (needs.build.result == 'success' || github.event.inputs.artifact_id != '') &&  needs.list-test-files.outputs.transformers-files != '[]' }}"
          echo "will torch run: ${{ (needs.build.result == 'success' || github.event.inputs.artifact_id != '') &&  needs.list-test-files.outputs.torch-files != '[]' }}"
          echo "will m4 run: ${{ (github.event.inputs.test_names == '' || contains(github.event.inputs.test_names, 'apple') || contains(github.event.inputs.test_names, 'mlx') )  && (needs.list-test-files.outputs.m4-files != '' || needs.list-test-files.outputs.m4-files != '[]') }}"

  build:
    runs-on: ${{ fromJSON(github.event.inputs.server ) }}
    needs:
      - check-vm
      - list-test-files
    if: needs.list-test-files.outputs.torch-files != '[]' || needs.list-test-files.outputs.transformers-files != '[]'
    container:
      image: ${{ needs.check-vm.outputs.ip }}:5000/nvidia/cuda:${{ needs.check-vm.outputs.cuda_version }}-ubuntu22.04_1021
      options: --device /dev/dri --ipc=host --runtime=nvidia --gpus all
      volumes:
        - /dev/dri/by-path:/dev/dri/by-path
        - /home/ci/models/pyenv:/opt/pyenv
        - /home/ci/models:/monster/data/model
        - /home/ci/models/huggingface:/github/home/.cache/huggingface

    steps:
      - name: Checkout Codes
        uses: actions/checkout@v5
        with:
          repository: ${{ env.repo }}
          ref: ${{ env.ref }}

      - name: Fetch PR by number
        if: ${{ github.event.inputs.pr_number != 0 }}
        run: |
          PR_NUMBER=${{ github.event.inputs.pr_number }}
          echo "pr number $PR_NUMBER"
          git config --global --add safe.directory $(pwd)
          git fetch origin pull/${PR_NUMBER}/head:pr-${PR_NUMBER}
          git checkout pr-${PR_NUMBER}

      - name: Print Env
        run: |
          echo "::group::pyenv versions"
          pyenv versions
          echo "::endgroup::"

          python_version=${{ env.PYTHON_VERSION }}
          if [[ "$python_version" != *"."* ]]; then
            python_version="${python_version/3/3.}"
          fi
          env_name="cu${{ needs.check-vm.outputs.cuda_version }}_torch${{ env.TORCH_VERSION }}_py${python_version}_build"

          echo "env name: $env_name"

          if [ -d "$(pyenv root)/versions/$env_name" ]; then
            echo "env exists, skip"
            pyenv local $env_name
            pyenv activate $env_name
          else
            echo "creating venv..."
            pyenv virtualenv "$python_version" "$env_name"
            pyenv local $env_name
            pyenv activate $env_name
            bash -c "$(curl -L http://${RUNNER}/scripts/env/init_compiler_no_env.sh)" @ ${{ needs.check-vm.outputs.cuda_version }} ${{ env.TORCH_VERSION }} $python_version
          fi

          pip install nvidia-cutlass

          echo "::group::pyenv versions"
          pyenv versions
          echo "::endgroup::"
          
          echo "== python =="
          python --version

          echo "== nvcc =="
          nvcc --version

          echo "== torch =="
          pip show torch

          echo "::group::pip list"
          pip list
          echo "::endgroup::"

  torch:
    needs:
      - build
      - list-test-files
      - check-vm
    runs-on: [ self-hosted, xeon5 ]
    container:
      image: ${{ needs.check-vm.outputs.ip }}:5000/nvidia/cuda:${{ needs.check-vm.outputs.cuda_version }}-ubuntu22.04_1021
      options: --device /dev/dri --ipc=host --runtime=nvidia --gpus all
      volumes:
        - /dev/dri/by-path:/dev/dri/by-path
        - /home/ci/models:/monster/data/model
        - /home/ci/models/huggingface:/github/home/.cache/huggingface
        - /home/ci/models/pyenv:/opt/pyenv
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(needs.check-vm.outputs.max-parallel).size || 20 }}
      matrix:
        test_script: ${{ fromJSON(needs.list-test-files.outputs.torch-files) }}
    if: always() && !cancelled() && (needs.build.result == 'success' || github.event.inputs.artifact_id != '') && needs.list-test-files.outputs.torch-files != '[]'
    steps:
      - name: Checkout Codes
        uses: actions/checkout@v5
        with:
          repository: ${{ env.repo }}
          ref: ${{ env.ref }}

      - name: Fetch PR by number
        if: ${{ github.event.inputs.pr_number != 0 }}
        run: |
          PR_NUMBER=${{ github.event.inputs.pr_number }}
          echo "pr number $PR_NUMBER"
          git config --global --add safe.directory $(pwd)
          git fetch origin pull/${PR_NUMBER}/head:pr-${PR_NUMBER}
          git checkout pr-${PR_NUMBER}

      - name: Print Env
        run: |
          python_version=${{ env.PYTHON_VERSION }}
          if [[ "$python_version" != *"."* ]]; then
            python_version="${python_version/3/3.}"
          fi
          test_name=${{ matrix.test_script }}
          test_name=${test_name//\//_}
          env_name="cu${{ needs.check-vm.outputs.cuda_version }}_torch${{ env.TORCH_VERSION }}_py${python_version}_test_${test_name}"
         
          if [ -d "$(pyenv root)/versions/$env_name" ]; then
            echo "env exists, skip"
            pyenv local $env_name
            pyenv activate $env_name
          else
            echo "creating venv..."
            pyenv virtualenv "$python_version" "$env_name"
            pyenv local $env_name
            pyenv activate $env_name
            bash -c "$(curl -L http://${RUNNER}/scripts/env/init_compiler_no_env.sh)" @ ${{ needs.check-vm.outputs.cuda_version }} ${{ env.TORCH_VERSION }} $python_version
          fi
          
          pip install nvidia-cutlass backoff

          echo "::group::pyenv versions"
          pyenv versions
          echo "::endgroup::"
          
          echo "== python =="
          python --version

          echo "== nvcc =="
          nvcc --version

          echo "== torch =="
          pip show torch

          echo "::group::pip list"
          pip list
          echo "::endgroup::"
